@page "/register"
@inject HttpClient Http
@using Shared.DTOs
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations

<h3>Rekisteröidy</h3>

<div>
    <label>Sähköposti:</label>
    <input @bind="RegisterModel.Email" class="form-control" />
</div>
<div>
    <label>Salasana:</label>
    <input type="password" @bind="RegisterModel.Password" class="form-control" />
</div>
<div>
    <label>Etunimi:</label>
    <input @bind="RegisterModel.FirstName" class="form-control" />
</div>
<div>
    <label>Sukunimi:</label>
    <input @bind="RegisterModel.LastName" class="form-control" />
</div>
<div>
    <label>Osoite:</label>
    <input @bind="RegisterModel.Address" class="form-control" />
</div>
<div>
    <label>Puhelinnumero:</label>
    <input @bind="RegisterModel.PhoneNumber" class="form-control" />
</div>
<div class="mt-3">
    <button class="btn btn-primary" @onclick="RegisterUser">Rekisteröidy</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="mt-3">@Message</p> <!-- Displays success or failure message -->
}

@code {
    // User details with RegisterModel object
    private RegisterModel RegisterModel { get; set; } = new RegisterModel();
    private string Message { get; set; } = string.Empty; // Message about registration result

    // Method to send registration
    private async Task RegisterUser()
    {
        try
        {
            // Send user details to the registration endpoint
            var response = await Http.PostAsJsonAsync("/api/auth/register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                Message = "Rekisteröinti onnistui!"; // Success message
            }
            else
            {
                // Try to read error in JSON format
                try
                {
                    var errorResponse = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    if (errorResponse != null && errorResponse.TryGetValue("Error", out var error))
                    {
                        Message = $"Rekisteröinti epäonnistui: {error}";
                    }
                    else
                    {
                        Message = "Rekisteröinti epäonnistui: tuntematon virhe.";
                    }
                }
                catch
                {
                    // If JSON reading fails, read error as text
                    var errorText = await response.Content.ReadAsStringAsync();
                    Message = $"Rekisteröinti epäonnistui: {errorText}";
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Virhe rekisteröityessä: {ex.Message}"; // Error message if request fails
        }
    }
}