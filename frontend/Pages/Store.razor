@page "/store"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Shared.Models

<h3>Käytetyt Puhelimet</h3>

<!-- Search Filters -->
<div class="filters mb-4">
    <div class="row g-3">
        <div class="col-md-3">
            <input type="text" class="form-control" @bind="brandFilter" placeholder="Merkki" />
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control" @bind="modelFilter" placeholder="Malli" />
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="conditionFilter">
                <option value="">Kaikki kunnot</option>
                <option value="Uusi">Uusi</option>
                <option value="Erinomainen">Erinomainen</option>
                <option value="Hyvä">Hyvä</option>
                <option value="Tyydyttävä">Tyydyttävä</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="number" class="form-control" @bind="maxPriceFilter" placeholder="Maksimihinta" />
        </div>
    </div>
    <button class="btn btn-primary mt-3" @onclick="FilterPhones">Hae</button>
</div>

@if (phones == null)
{
    <p>Ladataan...</p>
}
else if (!phones.Any())
{
    <p>Puhelimia ei löytynyt.</p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Merkki</th>
                    <th>Malli</th>
                    <th>Hinta</th>
                    <th>Kunto</th>
                    <th>Varastossa</th>
                    <th>Toiminnot</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var phone in phones)
                {
                    <tr>
                        <td>@phone.Brand</td>
                        <td>@phone.Model</td>
                        <td>@phone.Price €</td>
                        <td>@phone.Condition</td>
                        <td>@phone.StockQuantity</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => AddToCart(phone)">Lisää Ostoskoriin</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<PhoneModel> phones;
    private string brandFilter;
    private string modelFilter;
    private string conditionFilter;
    private decimal? maxPriceFilter;

    protected override async Task OnInitializedAsync()
    {
        await LoadPhones();
    }

    private async Task LoadPhones()
    {
        try
        {
            phones = await Http.GetFromJsonAsync<List<PhoneModel>>("/api/phones");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe puhelinten lataamisessa: {ex.Message}");
        }
    }

    private async Task FilterPhones()
    {
        var queryParams = new List<string>();

        if (!string.IsNullOrEmpty(brandFilter))
            queryParams.Add($"brand={Uri.EscapeDataString(brandFilter)}");

        if (!string.IsNullOrEmpty(modelFilter))
            queryParams.Add($"model={Uri.EscapeDataString(modelFilter)}");

        if (!string.IsNullOrEmpty(conditionFilter))
            queryParams.Add($"condition={Uri.EscapeDataString(conditionFilter)}");

        if (maxPriceFilter.HasValue)
            queryParams.Add($"maxPrice={maxPriceFilter}");

        var url = "/api/phones";
        if (queryParams.Any())
            url += "?" + string.Join("&", queryParams);

        try
        {
            phones = await Http.GetFromJsonAsync<List<PhoneModel>>(url);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe puhelinten hakemisessa: {ex.Message}");
        }
    }

    private async Task AddToCart(PhoneModel phone)
    {
        try
        {
            var cartItem = new CartItemModel
                {
                    PhoneID = phone.PhoneID,
                    Quantity = 1
                };

            var response = await Http.PostAsJsonAsync("/api/cart/items", cartItem);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Tuote lisätty ostoskoriin!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Virhe tuotteen lisäämisessä ostoskoriin: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe tuotteen lisäämisessä ostoskoriin: {ex.Message}");
        }
    }
}